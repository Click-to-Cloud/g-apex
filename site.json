{"title":"G.apex","githubRepo":"Click-to-Cloud/G.apex","googleAnalytics":"","index":{"title":"Home","description":"G.apex is a library to set up GraphQL-lite features in Apex.","content":" JSON Query G.apex adopts JSON query to make both building and parsing easier. Schema Types G.apex offers fluent APIs to build type in query schema. Visual Assistance Query Editor and Schema Explorer can help you explore G.apex queries. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/g-apex/./","children":{"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/g-apex/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/g-apex/docs/search.html"},"Core":{"children":{"alias":{"title":"Alias","description":"Alias","layout":"guide","icon":"flash","weight":4,"content":" {$page.description} Use Aliases { \"query\": { \"my_book:book\": { \"@id\": \"2\", \"name\": \"\" }, \"her_book:book\": { \"@id\": \"3\", \"name\": \"\" } } } Prepend the alias and : before the field to rename the field to the alias, producing results like: { \"query\": { \"her_book\": { \"name\": \"Third Book\" }, \"my_book\": { \"name\": \"Second Book\" } } } ","srcFilePath":"src/pages/docs/Core/alias.md","id":"alias","location":"/docs/Core/alias.html","url":"/g-apex/docs/Core/alias.html"},"default_value":{"title":"Default Value","description":"Default Value","layout":"guide","icon":"flash","weight":3,"content":" {$page.description} Define Default Values { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\", \"author\": { \"name\": \"Unknown author\" } } } } For non-object types, we can specify the default value of the field if the fetched value is null. ","srcFilePath":"src/pages/docs/Core/default_value.md","id":"default_value","location":"/docs/Core/default_value.html","url":"/g-apex/docs/Core/default_value.html"},"directive":{"title":"Directive","description":"Directive","layout":"guide","icon":"flash","weight":7,"content":" {$page.description} Use Directives { \"query\": { \"book\": { \"#include\": { \"if\": \"$showBook\" }, \"@id\": \"2\", \"name\": \"\" } }, \"$showBook\": \"false\" } We use the directives by prepending #. The available directives are: | Name | Description | | ---- | ----------- | | include | used with param 'if' to control if the object type is included | | skip | used with param 'if' to control if the object type is skipped | Custom Directives We can define custom directives. private class CustomDirective implements Directive { public String getName() { return 'custom'; } public Boolean beforeExecuting(Map args, DirectiveContext context) { // ... return true; } } G.registerDirective(new CustomDirective()); ","srcFilePath":"src/pages/docs/Core/directive.md","id":"directive","location":"/docs/Core/directive.html","url":"/g-apex/docs/Core/directive.html"},"fragment":{"title":"Fragment","description":"Fragment","layout":"guide","icon":"flash","weight":5,"content":" {$page.description} Use Fragments { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\", \"...author\": \"\" } }, \"...author\": { \"author\": { \"name\": \"\" } } } We define fragments by prepending ... before the name and placing them at the root of the query. The result will be like: { \"query\": { \"book\": { \"author\": { \"name\": \"First Author\" }, \"name\": \"Second Book\" } } } ","srcFilePath":"src/pages/docs/Core/fragment.md","id":"fragment","location":"/docs/Core/fragment.html","url":"/g-apex/docs/Core/fragment.html"},"parameters":{"title":"Parameters","description":"Parameters","layout":"guide","icon":"flash","weight":2,"content":" {$page.description} Define Parameters G.Schema schema = new G.Schema() .add( new G.ObjectType('query') .addField('book', bookType, new GetBookResolver()) .addParam('book', 'id', G.StringType, R.isNotNull) ); Compose Parameters { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\", \"author\": { \"name\": \"\" } } } } Processing Parameters private class GetBookResolver implements G.Resolver { public Object resolve(Map parent, Map args, G.ResolvingContext context) { return R.of(books).find(R.propEq.apply('id', args.get('id'))).toMap(); } } ","srcFilePath":"src/pages/docs/Core/parameters.md","id":"parameters","location":"/docs/Core/parameters.html","url":"/g-apex/docs/Core/parameters.html"},"variable":{"title":"Variable","description":"Variable","layout":"guide","icon":"flash","weight":6,"content":" {$page.description} Use Variables { \"query\": { \"book\": { \"@id\": \"2\", \"$var\": \"\" } }, \"$var\": \"name\" } We define variables by prepending $ before the name and placing them at the root of the query. ","srcFilePath":"src/pages/docs/Core/variable.md","id":"variable","location":"/docs/Core/variable.html","url":"/g-apex/docs/Core/variable.html"}},"title":"G.apex Core","description":"G.apex Core","layout":"guide","icon":"flash","weight":1,"content":" {$page.description} What is G.apex? G.apex is a library that helps you adopt GraphQL features in Apex. What is G.apex Query? G.apex Query is a JSON query that very much resembles GraphQL queries. Is G.apex compatible with GraphQL? Sadly no. G.apex adopts similar concepts from GraphQL, but is tuned for Salesforce Apex and is therefore not compatible with GraphQL specification. Why G.apex Query? Influenced by GraphQL, G.apex query can help you build flexible service end points. For example, normal RESTful end point like below can get you a book: https:///api/v2/book/{id} However, you have to code every single end point like this, and they are just not as flexible and composable. Say what if I want to get some extra fields of the book? what if I also want to get the related author of the book? G.apex can help you build a more flexible and composable end point like this: { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\" } } } You can control the fields of the result by adding or removing extra fields. Or you can get the related author easily like this: { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\", \"author\": { \"name\": \"\" } } } } And you can nest as you like: { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\", \"author\": { \"name\": \"\", \"books\": { \"name\": \"\" } } } } } Core G.apex Concepts Below are the most important concepts in G.apex. Schema A schema is the whole collection of the DataTypes defined. There is usually only one instance of Schema, registered globally to G.apex. The schema defines the graph. Data Type Various data types construct the query system. Simple data types can help build the basic data, while more complicated object types are used everywhere to define objects. Object types are more important in that they offer the main functionality to encapsulate the data and relate with each other. Object types are just like the vertexes in the graph. Resolving Resolving is the process when an object type tries to find its related object types. Basically, object types are supposed to be self-independent and should not concern other object type data. Only when a relationship is required do the object types start resolving the related object types. The resolving function provides the ability to navigate between vertexes in the graph. Example Here is an example of the schema and object types: private static G.ObjectType bookType = new G.ObjectType('Book', 'Book__c') .addField('id', G.StringType, 'Id') .addField('name', G.StringType, 'Name') .addField('author', new G.ReferenceType('Author'), new BookAuthorResolver()); private static G.ObjectType authorType = new G.ObjectType('Author') .addField('id', G.StringType) .addField('name', G.StringType) .addField('books', new G.ListType(new G.ReferenceType('Book')), new AuthorBooksResolver()); private static G.Schema schema = new G.Schema() .add( new G.ObjectType('query') .addField('books', new G.ListType(bookType), R.constant.apply(new List{ books })) .addField('book', bookType, new GetBookResolver()) .addParam('book', 'id', G.StringType, R.isNotNull) .addField('authors', new G.ListType(authorType), R.constant.apply(new List{ authors })) .addField('author', authorType, new GetAuthorResolver()) .addParam('author', 'id', G.StringType, R.isNotNull) ); private class BookAuthorResolver implements G.Resolver { public Object resolve(Map parent, Map args, G.ResolvingContext context) { return R.of(authors).find(R.propEq.apply('id', parent.get('authorId'))).toMap(); } } private class AuthorBooksResolver implements G.BatchResolver { public List resolve(List parents, Map args, G.ResolvingContext context) { List result = new List(); for(Object parentObj : parents) { Map parent = (Map)parentObj; List found = R.of(books).filter(R.propEq.apply('authorId', parent.get('id'))).toList(); result.add(found); } return result; } } private class GetAuthorResolver implements G.Resolver { public Object resolve(Map parent, Map args, G.ResolvingContext context) { return R.of(authors).find(R.propEq.apply('id', args.get('id'))).toMap(); } } private class GetBookResolver implements G.Resolver { public Object resolve(Map parent, Map args, G.ResolvingContext context) { return R.of(books).find(R.propEq.apply('id', args.get('id'))).toMap(); } } Resolvers Resolvers are the complex part in G.apex. We have two types of resolvers. Normal resolvers Normal resolvers take the resolving request one by one. Batch resolvers Batch resolvers take all the resolving requests in a batch. For performance's sake, we should use batch resolvers whenever we can. Normal Resolvers We can create a normal resolver by implementing G.Resolver like in the example. Or we can create a Func that takes the same arguments, and register it like this: G.ObjectType bookType = new G.ObjectType('Book', 'Book__c') .addField('id', G.StringType, 'Id') .addField('name', G.StringType, 'Name') .addField('author', new G.ReferenceType('Author'), new NormalResolverFunc(), false); Batch Resolvers We can create a batch resolver by implementing G.BatchResolver like in the example. Or we can create a Func that takes the same arguments, and register it like this: G.ObjectType bookType = new G.ObjectType('Book', 'Book__c') .addField('id', G.StringType, 'Id') .addField('name', G.StringType, 'Name') .addField('author', new G.ReferenceType('Author'), new BatchResolverFunc(), true); Resolving SObjects G.apex is especially tuned for handling SObjects. Here is an example of how to resolve SObjects. private class OpportunityResolver implements G.BatchResolver { public List resolve(List parents, Map args, G.ResolvingContext context) { List result = new List(); List ids = new List(); for(Object parentObj : parents) { Map parent = (Map)parentObj; ids.add((Id)parent.get('id')); } String sObjectType = context.getSObjectType(); List fields = context.getSObjectFields(); String soql = 'SELECT ' + String.join(fields, ', ') + ' FROM ' + sObjectType + ' WHERE Id in :ids'; List soList = Database.query(soql); for(SObject so : soList) { result.add(context.convertSObject(so)); } return result; } } Pull the Trigger When everything is ready, we can start executing G.apex queries with ease. Map result = (Map)G.execute(query); You can further build this as a remote action or a lightning server controller action or a web service end point. ","srcFilePath":"src/pages/docs/Core/index.md","id":"Core","location":"/docs/Core/","url":"/g-apex/docs/Core/","childIds":["parameters","default_value","alias","fragment","variable","directive"]},"Editor":{"title":"Editor","description":"Editor","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} Query Editor We can use the Query Editor after we have installed the GDemo lightning component. Compose G.apex query in the textarea and click on the 'Execute' button to execute the query. The result will be shown in the panel below. Schema Explorer We can use Schema Explorer to check out all the Data Types. Click on the links to check the details of the Data Type. Click on the title to go back to the root of the schema. ","srcFilePath":"src/pages/docs/Editor/index.md","id":"Editor","location":"/docs/Editor/","url":"/g-apex/docs/Editor/"},"Methods":{"children":{"data_type":{"title":"Data Type","description":"Data Type","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Data Types | Name | Usage | | ---- | ----- | | Boolean | G.BooleanType | | Integer | G.IntegerType | | Long | G.LongType | | String | G.StringType | | List | new G.ListType(G.DataType) | | Object | new G.ObjectType(String) / new G.ObjectType(String, String) | | Reference | new G.ReferenceType(String) | Data Type Methods All data types have the following methods: | Method | Description | | ------ | ----------- | | String getType() | Get the type name | List Type Methods | Method | Description | | ------ | ----------- | | G.DataType getElementType() | Get element data type | Object Type Methods | Method | Description | | ------ | ----------- | | String getName() | Get the name of the object type | | String getSObjectType() | Get the bound SObject type | | ObjectType addField(String, DataType, Func, Boolean, String) | Add field with name, type, resolver, resolver batch, and sobject type | | ObjectType addField(String, DataType, Func, Boolean) | Add field with name, type, resolver, resolver batch | | ObjectType addField(String, DataType, Func) | Add field with name, type, resolver | | ObjectType addField(String, DataType, BatchResolver) | Add field with name, type, resolver | | ObjectType addField(String, DataType, Resolver) | Add field with name, type, resolver | | ObjectType addField(String, DataType, String) | Add field with name, type, sobject type | | ObjectType addField(String, DataType) | Add field with name, type | | ObjectType addParam(String, String, DataType, Func) | Add a param with the field name, param name, type, validate func | | ObjectType addParam(String, String, DataType) | Add a param with the field name, param name, type | | Map&lt;String, String&gt; getSObjectFieldMapping() | Get the sobject field mapping | | Map&lt;String, String&gt; describe() | Describe the object type | Reference Type Methods | Method | Description | | ------ | ----------- | | String getName() | Get the name of the object type | | ObjectType getReferencedType() | Get the referenced object type | ","srcFilePath":"src/pages/docs/Methods/data_type.md","id":"data_type","location":"/docs/Methods/data_type.html","url":"/g-apex/docs/Methods/data_type.html"},"directive":{"title":"Directive","description":"Directive","layout":"guide","icon":"cloud","weight":6,"content":" {$page.description} Directive Methods | Method | Description | | ------ | ----------- | | String getName() | Needs to be implemented | | Boolean beforeExecuting(Map&lt;String, Object&gt;, DirectiveContext) | Needs to be implemented | ","srcFilePath":"src/pages/docs/Methods/directive.md","id":"directive","location":"/docs/Methods/directive.html","url":"/g-apex/docs/Methods/directive.html"},"global":{"title":"Global","description":"Global","layout":"guide","icon":"cloud","weight":2,"content":" {$page.description} execute Execute query on the schema G.Schema schema = new G.Schema(); Object data = G.execute(schema, query); | Method | Description | | ------ | ----------- | | G.execute(Schema, String) | Execute with schema and query | | G.execute(Schema, Map&lt;String, Object&gt;) | Execute with schema and query data | | G.execute(String) | Execute with query | | G.execute(Map&lt;String, Object&gt;) | Execute with query data | getObjectType Get the registered object type G.ObjectType objectType = G.getObjectType('Book'); describe Describe the given object type by name Return the description of the schema if no object type given Map result = G.describe('Book'); registerDirective Register a custom direcitve G.registerDirective(new MyCustomDirective()); ","srcFilePath":"src/pages/docs/Methods/global.md","id":"global","location":"/docs/Methods/global.html","url":"/g-apex/docs/Methods/global.html"},"resolver":{"title":"Resolver","description":"Resolver","layout":"guide","icon":"cloud","weight":5,"content":" {$page.description} Resolver Methods | Method | Description | | ------ | ----------- | | Object resolve(Map&lt;String, Object&gt;, Map&lt;String, Object&gt;, ResolvingContext) | Needs to be implemented | BatchResolver Methods | Method | Description | | ------ | ----------- | | List&lt;Object&gt; resolve(List&lt;Object&gt;, Map&lt;String, Object&gt;, ResolvingContext) | Needs to be implemented | ResolvingContext Methods | Method | Description | | ------ | ----------- | | String getSObjectType() | Get the bound sobject type | | List&lt;String&gt; getSObjectFields() | Get the filtered sobject fields | | Map&lt;String, Object&gt; getQueryData() | Get the query data | | Map&lt;String, Object&gt; convertSObject(SObject) | Convert the sobject according to the object type | ","srcFilePath":"src/pages/docs/Methods/resolver.md","id":"resolver","location":"/docs/Methods/resolver.html","url":"/g-apex/docs/Methods/resolver.html"},"schema":{"title":"Schema","description":"Schema","layout":"guide","icon":"cloud","weight":3,"content":" {$page.description} Constructor G.Schema schema = new G.Schema(); add Add a root object type new G.Schema() .add(new G.ObjectType('Book')); describe Describe the schema Map data = new G.Schema.describe(); // { 'query' = 'Query' } ","srcFilePath":"src/pages/docs/Methods/schema.md","id":"schema","location":"/docs/Methods/schema.html","url":"/g-apex/docs/Methods/schema.html"}},"title":"Methods","description":"Methods","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} G.apex Methods Here is the reference of the methods in G.apex. ","srcFilePath":"src/pages/docs/Methods/index.md","id":"Methods","location":"/docs/Methods/","url":"/g-apex/docs/Methods/","childIds":["global","schema","data_type","resolver","directive"]}},"childIds":["Core","Editor","Methods","search"]},"tutorials":{"title":"Tutorials","description":"The tutorials","url":"/g-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"getting_started":{"title":"Getting Started","description":"The Getting Started Tutorial","tutorialTitle":"Getting started with G.apex","url":"/g-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/getting_started/index.soy","id":"getting_started","location":"/tutorials/getting_started/","customURL":true,"children":{"step_1":{"title":"Installation","description":"Include Apex files","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":1,"content":" {$page.title} G.apex has a dependency on R.apex. First, we will include R.apex. Include Func.cls, R.cls, and RTest.cls(optional) into your Org, and R.apex is ready. Then, we will include G.apex. Include G.cls, and GTest.cls(optional) into your Org, and you are ready to go. If you want to use Query Editor, include GDemoController.cls, and GDemo lightning component into your Org. ","srcFilePath":"src/pages/tutorials/getting_started/step_1.md","id":"step_1","location":"/tutorials/getting_started/step_1.html","url":"/g-apex/tutorials/getting_started/step_1.html"},"step_10":{"title":"Parameters","description":"Parameters","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":10,"content":" {$page.title} G.apex query support passing parameters. { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\", \"author\": { \"name\": \"\" } } } } A parameter id is added to book in this example. Parameters are always prefixed with @. ","srcFilePath":"src/pages/tutorials/getting_started/step_10.md","id":"step_10","location":"/tutorials/getting_started/step_10.html","url":"/g-apex/tutorials/getting_started/step_10.html"},"step_11":{"title":"Default Value","description":"Default Value","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":11,"content":" {$page.title} We can specify the default values in G.apex query. { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\", \"author\": { \"name\": \"Unknown author\" } } } } Here if the author of the book is not found, Unknown author will be returned as the default value. ","srcFilePath":"src/pages/tutorials/getting_started/step_11.md","id":"step_11","location":"/tutorials/getting_started/step_11.html","url":"/g-apex/tutorials/getting_started/step_11.html"},"step_12":{"title":"Aliases","description":"Aliases","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":12,"content":" {$page.title} We can specify aliases in our G.apex query, so that the query result can be tailored to our needs. { \"query\": { \"my_book:book\": { \"@id\": \"2\", \"name\": \"\" }, \"her_book:book\": { \"@id\": \"3\", \"name\": \"\" } } } The result will look like: { \"query\": { \"her_book\": { \"name\": \"Third Book\" }, \"my_book\": { \"name\": \"Second Book\" } } } Here we use : to separate the alias and the field name. ","srcFilePath":"src/pages/tutorials/getting_started/step_12.md","id":"step_12","location":"/tutorials/getting_started/step_12.html","url":"/g-apex/tutorials/getting_started/step_12.html"},"step_13":{"title":"Fragments","description":"Fragments","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":13,"content":" {$page.title} We can create fragments to reuse some of our definitions in the G.apex query. { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\", \"...author\": \"\" } }, \"...author\": { \"author\": { \"name\": \"\" } } } Produces: { \"query\": { \"book\": { \"author\": { \"name\": \"First Author\" }, \"name\": \"Second Book\" } } } Here we define a fragment named ...author at the root of the query, and anywhere else it is used, it will be replaced by the fragment. Fragments are defined by prepending .... ","srcFilePath":"src/pages/tutorials/getting_started/step_13.md","id":"step_13","location":"/tutorials/getting_started/step_13.html","url":"/g-apex/tutorials/getting_started/step_13.html"},"step_14":{"title":"Variables","description":"Variables","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":14,"content":" {$page.title} Simple variables are supported in G.apex query. { \"query\": { \"book\": { \"@id\": \"2\", \"$var\": \"\" } }, \"$var\": \"name\" } We define a variable $var at the root of the query, and anywhere else it is used, it will be replace by the value name. Variables are defined by prepending $. ","srcFilePath":"src/pages/tutorials/getting_started/step_14.md","id":"step_14","location":"/tutorials/getting_started/step_14.html","url":"/g-apex/tutorials/getting_started/step_14.html"},"step_15":{"title":"Directives","description":"Directives","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":15,"content":" {$page.title} We can control the behavior of the G.apex query by applying directives. { \"query\": { \"book\": { \"include\": { \"if\": \"$showBook\" }, \"@id\": \"2\", \"name\": \"\" } }, \"$showBook\": \"false\" } Here #include is a directive, which will include fields of book only when if is true. As we are in JSON, we have to quote variables with double quotes. But it does not matter as G.apex will still correctly parse its value according to the data type we have specified. Directives in G.apex start with #. We can also define custom directives in G.apex. ","srcFilePath":"src/pages/tutorials/getting_started/step_15.md","id":"step_15","location":"/tutorials/getting_started/step_15.html","url":"/g-apex/tutorials/getting_started/step_15.html"},"step_2":{"title":"Preliminary Knowledge","description":"Preliminary Knowledge","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":2,"content":" {$page.title} It's recommended that you have a fair amount of knowledge on R.apex, but it's not required. G.apex uses Func objects from R.apex, and a Func is actually a custom Apex object that mimics the behavior of a function. Here is how your implement a custom Func. public class HelloWorldFunc extends Func { public HelloWorldFunc() { super(0); // specify the number of arguments the Func takes } // Provide custom implementation for a Func that takes 0 arguments. public override Object exec() { return 'Hello World'; } } And then you instantiate, and invoke it. Func helloworld = new HelloWorldFunc(); String msg = (String)helloworld.run(); To get deeper with Func objects, please check R.apex. ","srcFilePath":"src/pages/tutorials/getting_started/step_2.md","id":"step_2","location":"/tutorials/getting_started/step_2.html","url":"/g-apex/tutorials/getting_started/step_2.html"},"step_3":{"title":"G.apex Demo","description":"G.apex Demo","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":3,"content":" {$page.title} G.apex provides a Lightning component for you to explore the features of G.apex. To use this component after installing G.apex, simply create a Lightning tab and select c:Gapexdemo in the dropdown list. Then visit the link in your org: https://YOURORG/lightning/n/Gapex_demo The top part of the component is the Query Editor, where you can edit your G.apex query and execute them against a small set of data. The bottom part of the component is the Schema Explorer, which exposes all the object types defined in your root schema. Click on the link to jump to the details of the object type. ","srcFilePath":"src/pages/tutorials/getting_started/step_3.md","id":"step_3","location":"/tutorials/getting_started/step_3.html","url":"/g-apex/tutorials/getting_started/step_3.html"},"step_4":{"title":"G.apex Query","description":"G.apex Query","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":4,"content":" {$page.title} G.apex uses a different query syntax from GraphQL. It uses JSON format like this: { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\" } } } This is somehow equivalent to the true GraphQL below: { book(id: 2) { name } } This query will yield results like this: { \"query\": { \"book\": { \"name\": \"Second Book\" } } } For those who are not familiar with GraphQL, the code above means that we want to query the book with id equals to 2, retrieving the name of the book. We use JSON to define the query language primarily because we want to avoid unnecessary use of compute in Apex considering the governor limits. ","srcFilePath":"src/pages/tutorials/getting_started/step_4.md","id":"step_4","location":"/tutorials/getting_started/step_4.html","url":"/g-apex/tutorials/getting_started/step_4.html"},"step_5":{"title":"Create Object Types","description":"Create Object Types","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":5,"content":" {$page.title} To start with, we create some simple Object Types. G.ObjectType bookType = new G.ObjectType('Book', 'Book__c') .addField('id', G.StringType, 'Id') .addField('name', G.StringType, 'Name'); Here we created an ObjectType of Book, bound to SObject type Book__c. The book type has two fields, id of String type and name of String type. ","srcFilePath":"src/pages/tutorials/getting_started/step_5.md","id":"step_5","location":"/tutorials/getting_started/step_5.html","url":"/g-apex/tutorials/getting_started/step_5.html"},"step_6":{"title":"Create Schema","description":"Create Schema","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":6,"content":" {$page.title} We need to define access points on our schema so that our data is accessible. G.Schema schema = new G.Schema() .add( new G.ObjectType('query') .addField('books', new G.ListType(bookType), R.constant.apply(new List{ books })) ); Here we defined a new ObjectType query, with the field books that can retrive a list of books. Then we add this object type to the schema. R.constant.apply(...) here is a resolver Func that always returns the list of list of books whenever called. A resolver can be implemented by either a Func or an instance of BatchResolver or Resolver. You might feel strange why we return a list of list of books. The reason is that by default our resolver function is invoked by batch to improve performance. We will see this later. ","srcFilePath":"src/pages/tutorials/getting_started/step_6.md","id":"step_6","location":"/tutorials/getting_started/step_6.html","url":"/g-apex/tutorials/getting_started/step_6.html"},"step_7":{"title":"Resolver Functions","description":"Resolver Functions","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":7,"content":" {$page.title} In G.apex, we fetch information based on each nodes. When it comes to the relationship between different nodes, we use resolver functions to handle. Consider the query below: { \"query\": { \"book\": { \"@id\": \"2\", \"name\": \"\", \"author\": { \"name\": \"\" } } } } We want to further get the author information related to the book. In this case, we define our book type as below. G.ObjectType bookType = new G.ObjectType('Book', 'Book__c') .addField('id', G.StringType, 'Id') .addField('name', G.StringType, 'Name') .addField('author', new G.ReferenceType('Author'), new BookAuthorResolver()); BookAuthorResolver is provided to author field, so that whenever the relationship is required, the resolver function will be invoked. Here is what BookAuthorResolver looks like: private class BookAuthorResolver implements G.Resolver { public Object resolve(Map parent, Map args, G.ResolvingContext context) { return R.of(authors).find(R.propEq.apply('id', parent.get('authorId'))).toMap(); } } In the resolver, we find the author that matches the authorId of the book from the list of authors. Notice here that we are using a resolver that does not take a batch. If we want to use a batch resolver, we do it like this: private class AuthorBooksResolver implements G.BatchResolver { public List resolve(List parents, Map args, G.ResolvingContext context) { List result = new List(); for(Object parentObj : parents) { Map parent = (Map)parentObj; List found = R.of(books).filter(R.propEq.apply('authorId', parent.get('id'))).toList(); result.add(found); } return result; } } In this resolver, we get the list of books related to the author based on the passed in list of parents. Basically batch resolvers should be used if there is such operation like doing DML operations or querying or making http requests. ","srcFilePath":"src/pages/tutorials/getting_started/step_7.md","id":"step_7","location":"/tutorials/getting_started/step_7.html","url":"/g-apex/tutorials/getting_started/step_7.html"},"step_8":{"title":"Serve Query Request","description":"Serve Query Request","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":8,"content":" {$page.title} Our building work is done. Next we can provide our query service. The core API is below: Map result = (Map)G.execute(query); query here is the G.apex query JSON string. And the result is the data after processing the query. ","srcFilePath":"src/pages/tutorials/getting_started/step_8.md","id":"step_8","location":"/tutorials/getting_started/step_8.html","url":"/g-apex/tutorials/getting_started/step_8.html"},"step_9":{"title":"Mutation","description":"Mutation","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":9,"content":" {$page.title} G.apex treats query and mutation similarly. We can define our mutation operations in the schema, and process the requests in the resolving functions. G.Schema schema = new G.Schema() .add( new G.ObjectType('mutation') .addField('addBook', bookType, new AddBookResolver()) .addParam('addBook', 'name', G.StringType, R.isNotNull) ); We add a parameter definition name of String type to the field addBook. Also this parameter has a validation of not-null specified by the R.isNotNull Func. ","srcFilePath":"src/pages/tutorials/getting_started/step_9.md","id":"step_9","location":"/tutorials/getting_started/step_9.html","url":"/g-apex/tutorials/getting_started/step_9.html"}},"childIds":["step_1","step_2","step_3","step_4","step_5","step_6","step_7","step_8","step_9","step_10","step_11","step_12","step_13","step_14","step_15"]}},"childIds":["getting_started"]}},"childIds":["docs","tutorials"]},"basePath":"/g-apex"}